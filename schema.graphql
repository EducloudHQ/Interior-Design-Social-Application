schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Address @aws_cognito_user_pools {
  city: String!
  country: String!
  street: String!
  zip: Int!
}

type Comment @aws_api_key @aws_cognito_user_pools {
  comment: String!
  createdOn: AWSTimestamp!
  id: String!
  postId: String!
  updatedOn: AWSTimestamp
  user: User
  userId: String!
}

type Follow @aws_cognito_user_pools {
  followerId: String!
  followingId: String!
}

type FollowerResult @aws_cognito_user_pools {
  items: [User!]!
  nextToken: String
}

type Message @aws_cognito_user_pools {
  createdOn: AWSTimestamp!
  id: String!
  image: String
  messageType: MESSAGETYPE!
  read: Boolean!
  receiverId: String!
  senderId: String!
  text: String
}

type Mutation {
  createComment(commentInput: CreateCommentInput!): Comment! @aws_cognito_user_pools
  createPost(postInput: CreatePostInput!): Post! @aws_cognito_user_pools
  createUserAccount(userInput: CreateUserInput!): User! @aws_cognito_user_pools
  deletePost(postId: String!, userId: String!): Boolean! @aws_cognito_user_pools
  followUser(followerId: String!, followingId: String!): Follow! @aws_cognito_user_pools
  sendMessage(input: MessageInput!): Message! @aws_cognito_user_pools
  typingIndicator(receiverId: String!, senderId: String!, typing: Boolean!): TypingIndicator! @aws_cognito_user_pools
  updateMessageReadReceipts(input: UpdateMessageReadReceiptsInput!): Message! @aws_cognito_user_pools
  updatePost(postInput: UpdatePostInput!): Post! @aws_cognito_user_pools
  updateUserAccount(userInput: UpdateUserInput!): User! @aws_cognito_user_pools
}

type Post @aws_api_key @aws_cognito_user_pools {
  comment: [Comment!]
  content: String!
  createdOn: AWSTimestamp!
  id: String!
  imageUrl: String
  updatedOn: AWSTimestamp
  userId: String!
}

type PostCommentsResult @aws_cognito_user_pools {
  items: [Comment!]!
  nextToken: String
}

type PostsResult @aws_api_key @aws_cognito_user_pools {
  items: [Post!]!
  nextToken: String
}

type Query {
  generatePostImage(prompt: String!): String! @aws_cognito_user_pools
  getAllPosts(limit: Int!, nextToken: String): PostsResult! @aws_api_key @aws_cognito_user_pools
  getAllUserFollowers(limit: Int!, nextToken: String, userId: String): FollowerResult! @aws_cognito_user_pools
  getCommentsPerPost(limit: Int!, nextToken: String, postId: String!): PostCommentsResult! @aws_cognito_user_pools
  getPost(id: String!): Post! @aws_api_key @aws_cognito_user_pools
  getSingleComment(commentId: String!): Comment! @aws_cognito_user_pools
  getUserAccount(id: String!): User! @aws_cognito_user_pools
}

type Subscription {
  createdComment: Comment @aws_subscribe(mutations : ["createComment"])
  createdPost: Post @aws_subscribe(mutations : ["createPost"])
  newMessage: Message @aws_subscribe(mutations : ["sendMessage", "updateMessageReadReceipts"])
  typingIndicator: TypingIndicator @aws_subscribe(mutations : ["typingIndicator"])
}

type TypingIndicator @aws_cognito_user_pools {
  receiverId: String!
  senderId: String!
  typing: Boolean!
}

type User @aws_cognito_user_pools {
  address: Address
  createdOn: AWSTimestamp
  email: AWSEmail!
  firstName: String!
  id: String!
  lastName: String!
  profilePicUrl: String!
  updatedOn: AWSTimestamp
  userType: USERTYPE!
  username: String!
}

enum MESSAGETYPE {
  IMAGE
  TEXT
}

enum USERTYPE {
  ADMIN
  MEMBER
}

input AddressInput @aws_cognito_user_pools {
  city: String!
  country: String!
  street: String!
  zip: Int!
}

input CreateCommentInput @aws_cognito_user_pools {
  comment: String!
  postId: String!
  userId: String!
}

input CreatePostInput @aws_cognito_user_pools {
  content: String!
  imageUrl: String
  userId: String!
}

input CreateUserInput @aws_cognito_user_pools {
  email: AWSEmail!
  firstName: String!
  lastName: String!
  profilePicUrl: String!
  userType: USERTYPE!
  username: String!
}

input MessageInput @aws_cognito_user_pools {
  image: String
  messageType: MESSAGETYPE!
  read: Boolean!
  receiverId: String!
  senderId: String!
  text: String
}

input UpdateMessageReadReceiptsInput @aws_cognito_user_pools {
  id: String!
  read: Boolean!
  receiverId: String!
  senderId: String!
}

input UpdatePostInput @aws_cognito_user_pools {
  content: String
  id: String!
  imageUrl: String
  userId: String
}

input UpdateUserInput @aws_cognito_user_pools {
  address: AddressInput!
  email: AWSEmail!
  id: String!
  profilePicUrl: String!
  username: String!
}
